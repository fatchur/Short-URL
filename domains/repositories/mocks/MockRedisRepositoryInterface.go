// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockRedisRepositoryInterface is an autogenerated mock type for the RedisRepositoryInterface type
type MockRedisRepositoryInterface struct {
	mock.Mock
}

type MockRedisRepositoryInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRedisRepositoryInterface) EXPECT() *MockRedisRepositoryInterface_Expecter {
	return &MockRedisRepositoryInterface_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: ctx, key
func (_m *MockRedisRepositoryInterface) Delete(ctx context.Context, key string) error {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRedisRepositoryInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockRedisRepositoryInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockRedisRepositoryInterface_Expecter) Delete(ctx interface{}, key interface{}) *MockRedisRepositoryInterface_Delete_Call {
	return &MockRedisRepositoryInterface_Delete_Call{Call: _e.mock.On("Delete", ctx, key)}
}

func (_c *MockRedisRepositoryInterface_Delete_Call) Run(run func(ctx context.Context, key string)) *MockRedisRepositoryInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRedisRepositoryInterface_Delete_Call) Return(_a0 error) *MockRedisRepositoryInterface_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRedisRepositoryInterface_Delete_Call) RunAndReturn(run func(context.Context, string) error) *MockRedisRepositoryInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Exists provides a mock function with given fields: ctx, key
func (_m *MockRedisRepositoryInterface) Exists(ctx context.Context, key string) (bool, error) {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRedisRepositoryInterface_Exists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exists'
type MockRedisRepositoryInterface_Exists_Call struct {
	*mock.Call
}

// Exists is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockRedisRepositoryInterface_Expecter) Exists(ctx interface{}, key interface{}) *MockRedisRepositoryInterface_Exists_Call {
	return &MockRedisRepositoryInterface_Exists_Call{Call: _e.mock.On("Exists", ctx, key)}
}

func (_c *MockRedisRepositoryInterface_Exists_Call) Run(run func(ctx context.Context, key string)) *MockRedisRepositoryInterface_Exists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRedisRepositoryInterface_Exists_Call) Return(_a0 bool, _a1 error) *MockRedisRepositoryInterface_Exists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRedisRepositoryInterface_Exists_Call) RunAndReturn(run func(context.Context, string) (bool, error)) *MockRedisRepositoryInterface_Exists_Call {
	_c.Call.Return(run)
	return _c
}

// Expire provides a mock function with given fields: ctx, key, expiration
func (_m *MockRedisRepositoryInterface) Expire(ctx context.Context, key string, expiration time.Duration) error {
	ret := _m.Called(ctx, key, expiration)

	if len(ret) == 0 {
		panic("no return value specified for Expire")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration) error); ok {
		r0 = rf(ctx, key, expiration)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRedisRepositoryInterface_Expire_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Expire'
type MockRedisRepositoryInterface_Expire_Call struct {
	*mock.Call
}

// Expire is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - expiration time.Duration
func (_e *MockRedisRepositoryInterface_Expecter) Expire(ctx interface{}, key interface{}, expiration interface{}) *MockRedisRepositoryInterface_Expire_Call {
	return &MockRedisRepositoryInterface_Expire_Call{Call: _e.mock.On("Expire", ctx, key, expiration)}
}

func (_c *MockRedisRepositoryInterface_Expire_Call) Run(run func(ctx context.Context, key string, expiration time.Duration)) *MockRedisRepositoryInterface_Expire_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(time.Duration))
	})
	return _c
}

func (_c *MockRedisRepositoryInterface_Expire_Call) Return(_a0 error) *MockRedisRepositoryInterface_Expire_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRedisRepositoryInterface_Expire_Call) RunAndReturn(run func(context.Context, string, time.Duration) error) *MockRedisRepositoryInterface_Expire_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, key
func (_m *MockRedisRepositoryInterface) Get(ctx context.Context, key string) (string, error) {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRedisRepositoryInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockRedisRepositoryInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockRedisRepositoryInterface_Expecter) Get(ctx interface{}, key interface{}) *MockRedisRepositoryInterface_Get_Call {
	return &MockRedisRepositoryInterface_Get_Call{Call: _e.mock.On("Get", ctx, key)}
}

func (_c *MockRedisRepositoryInterface_Get_Call) Run(run func(ctx context.Context, key string)) *MockRedisRepositoryInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRedisRepositoryInterface_Get_Call) Return(_a0 string, _a1 error) *MockRedisRepositoryInterface_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRedisRepositoryInterface_Get_Call) RunAndReturn(run func(context.Context, string) (string, error)) *MockRedisRepositoryInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetInt provides a mock function with given fields: ctx, key
func (_m *MockRedisRepositoryInterface) GetInt(ctx context.Context, key string) (int, error) {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for GetInt")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRedisRepositoryInterface_GetInt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInt'
type MockRedisRepositoryInterface_GetInt_Call struct {
	*mock.Call
}

// GetInt is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockRedisRepositoryInterface_Expecter) GetInt(ctx interface{}, key interface{}) *MockRedisRepositoryInterface_GetInt_Call {
	return &MockRedisRepositoryInterface_GetInt_Call{Call: _e.mock.On("GetInt", ctx, key)}
}

func (_c *MockRedisRepositoryInterface_GetInt_Call) Run(run func(ctx context.Context, key string)) *MockRedisRepositoryInterface_GetInt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRedisRepositoryInterface_GetInt_Call) Return(_a0 int, _a1 error) *MockRedisRepositoryInterface_GetInt_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRedisRepositoryInterface_GetInt_Call) RunAndReturn(run func(context.Context, string) (int, error)) *MockRedisRepositoryInterface_GetInt_Call {
	_c.Call.Return(run)
	return _c
}

// Increment provides a mock function with given fields: ctx, key
func (_m *MockRedisRepositoryInterface) Increment(ctx context.Context, key string) (int64, error) {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Increment")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int64, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int64); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRedisRepositoryInterface_Increment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Increment'
type MockRedisRepositoryInterface_Increment_Call struct {
	*mock.Call
}

// Increment is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockRedisRepositoryInterface_Expecter) Increment(ctx interface{}, key interface{}) *MockRedisRepositoryInterface_Increment_Call {
	return &MockRedisRepositoryInterface_Increment_Call{Call: _e.mock.On("Increment", ctx, key)}
}

func (_c *MockRedisRepositoryInterface_Increment_Call) Run(run func(ctx context.Context, key string)) *MockRedisRepositoryInterface_Increment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRedisRepositoryInterface_Increment_Call) Return(_a0 int64, _a1 error) *MockRedisRepositoryInterface_Increment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRedisRepositoryInterface_Increment_Call) RunAndReturn(run func(context.Context, string) (int64, error)) *MockRedisRepositoryInterface_Increment_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function with given fields: ctx, key, value, expiration
func (_m *MockRedisRepositoryInterface) Set(ctx context.Context, key string, value interface{}, expiration time.Duration) error {
	ret := _m.Called(ctx, key, value, expiration)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, time.Duration) error); ok {
		r0 = rf(ctx, key, value, expiration)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRedisRepositoryInterface_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type MockRedisRepositoryInterface_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - value interface{}
//   - expiration time.Duration
func (_e *MockRedisRepositoryInterface_Expecter) Set(ctx interface{}, key interface{}, value interface{}, expiration interface{}) *MockRedisRepositoryInterface_Set_Call {
	return &MockRedisRepositoryInterface_Set_Call{Call: _e.mock.On("Set", ctx, key, value, expiration)}
}

func (_c *MockRedisRepositoryInterface_Set_Call) Run(run func(ctx context.Context, key string, value interface{}, expiration time.Duration)) *MockRedisRepositoryInterface_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}), args[3].(time.Duration))
	})
	return _c
}

func (_c *MockRedisRepositoryInterface_Set_Call) Return(_a0 error) *MockRedisRepositoryInterface_Set_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRedisRepositoryInterface_Set_Call) RunAndReturn(run func(context.Context, string, interface{}, time.Duration) error) *MockRedisRepositoryInterface_Set_Call {
	_c.Call.Return(run)
	return _c
}

// TTL provides a mock function with given fields: ctx, key
func (_m *MockRedisRepositoryInterface) TTL(ctx context.Context, key string) (time.Duration, error) {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for TTL")
	}

	var r0 time.Duration
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (time.Duration, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) time.Duration); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRedisRepositoryInterface_TTL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TTL'
type MockRedisRepositoryInterface_TTL_Call struct {
	*mock.Call
}

// TTL is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockRedisRepositoryInterface_Expecter) TTL(ctx interface{}, key interface{}) *MockRedisRepositoryInterface_TTL_Call {
	return &MockRedisRepositoryInterface_TTL_Call{Call: _e.mock.On("TTL", ctx, key)}
}

func (_c *MockRedisRepositoryInterface_TTL_Call) Run(run func(ctx context.Context, key string)) *MockRedisRepositoryInterface_TTL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRedisRepositoryInterface_TTL_Call) Return(_a0 time.Duration, _a1 error) *MockRedisRepositoryInterface_TTL_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRedisRepositoryInterface_TTL_Call) RunAndReturn(run func(context.Context, string) (time.Duration, error)) *MockRedisRepositoryInterface_TTL_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRedisRepositoryInterface creates a new instance of MockRedisRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRedisRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRedisRepositoryInterface {
	mock := &MockRedisRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

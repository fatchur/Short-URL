// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"
	dto "short-url/domains/dto"

	entities "short-url/domains/entities"

	mock "github.com/stretchr/testify/mock"
)

// MockShortUrlQueryRepositoryInterface is an autogenerated mock type for the ShortUrlQueryRepositoryInterface type
type MockShortUrlQueryRepositoryInterface struct {
	mock.Mock
}

type MockShortUrlQueryRepositoryInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockShortUrlQueryRepositoryInterface) EXPECT() *MockShortUrlQueryRepositoryInterface_Expecter {
	return &MockShortUrlQueryRepositoryInterface_Expecter{mock: &_m.Mock}
}

// FindByFilter provides a mock function with given fields: ctx, filter, pagination
func (_m *MockShortUrlQueryRepositoryInterface) FindByFilter(ctx context.Context, filter dto.ShortUrlQueryFilter, pagination dto.Pagination) ([]entities.ShortUrl, *dto.PaginationResponse, error) {
	ret := _m.Called(ctx, filter, pagination)

	if len(ret) == 0 {
		panic("no return value specified for FindByFilter")
	}

	var r0 []entities.ShortUrl
	var r1 *dto.PaginationResponse
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.ShortUrlQueryFilter, dto.Pagination) ([]entities.ShortUrl, *dto.PaginationResponse, error)); ok {
		return rf(ctx, filter, pagination)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.ShortUrlQueryFilter, dto.Pagination) []entities.ShortUrl); ok {
		r0 = rf(ctx, filter, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.ShortUrl)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.ShortUrlQueryFilter, dto.Pagination) *dto.PaginationResponse); ok {
		r1 = rf(ctx, filter, pagination)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*dto.PaginationResponse)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, dto.ShortUrlQueryFilter, dto.Pagination) error); ok {
		r2 = rf(ctx, filter, pagination)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockShortUrlQueryRepositoryInterface_FindByFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByFilter'
type MockShortUrlQueryRepositoryInterface_FindByFilter_Call struct {
	*mock.Call
}

// FindByFilter is a helper method to define mock.On call
//   - ctx context.Context
//   - filter dto.ShortUrlQueryFilter
//   - pagination dto.Pagination
func (_e *MockShortUrlQueryRepositoryInterface_Expecter) FindByFilter(ctx interface{}, filter interface{}, pagination interface{}) *MockShortUrlQueryRepositoryInterface_FindByFilter_Call {
	return &MockShortUrlQueryRepositoryInterface_FindByFilter_Call{Call: _e.mock.On("FindByFilter", ctx, filter, pagination)}
}

func (_c *MockShortUrlQueryRepositoryInterface_FindByFilter_Call) Run(run func(ctx context.Context, filter dto.ShortUrlQueryFilter, pagination dto.Pagination)) *MockShortUrlQueryRepositoryInterface_FindByFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dto.ShortUrlQueryFilter), args[2].(dto.Pagination))
	})
	return _c
}

func (_c *MockShortUrlQueryRepositoryInterface_FindByFilter_Call) Return(_a0 []entities.ShortUrl, _a1 *dto.PaginationResponse, _a2 error) *MockShortUrlQueryRepositoryInterface_FindByFilter_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockShortUrlQueryRepositoryInterface_FindByFilter_Call) RunAndReturn(run func(context.Context, dto.ShortUrlQueryFilter, dto.Pagination) ([]entities.ShortUrl, *dto.PaginationResponse, error)) *MockShortUrlQueryRepositoryInterface_FindByFilter_Call {
	_c.Call.Return(run)
	return _c
}

// FindByID provides a mock function with given fields: ctx, id
func (_m *MockShortUrlQueryRepositoryInterface) FindByID(ctx context.Context, id uint) (*entities.ShortUrl, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 *entities.ShortUrl
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) (*entities.ShortUrl, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) *entities.ShortUrl); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.ShortUrl)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockShortUrlQueryRepositoryInterface_FindByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByID'
type MockShortUrlQueryRepositoryInterface_FindByID_Call struct {
	*mock.Call
}

// FindByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id uint
func (_e *MockShortUrlQueryRepositoryInterface_Expecter) FindByID(ctx interface{}, id interface{}) *MockShortUrlQueryRepositoryInterface_FindByID_Call {
	return &MockShortUrlQueryRepositoryInterface_FindByID_Call{Call: _e.mock.On("FindByID", ctx, id)}
}

func (_c *MockShortUrlQueryRepositoryInterface_FindByID_Call) Run(run func(ctx context.Context, id uint)) *MockShortUrlQueryRepositoryInterface_FindByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint))
	})
	return _c
}

func (_c *MockShortUrlQueryRepositoryInterface_FindByID_Call) Return(_a0 *entities.ShortUrl, _a1 error) *MockShortUrlQueryRepositoryInterface_FindByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockShortUrlQueryRepositoryInterface_FindByID_Call) RunAndReturn(run func(context.Context, uint) (*entities.ShortUrl, error)) *MockShortUrlQueryRepositoryInterface_FindByID_Call {
	_c.Call.Return(run)
	return _c
}

// FindByShortCode provides a mock function with given fields: ctx, shortCode
func (_m *MockShortUrlQueryRepositoryInterface) FindByShortCode(ctx context.Context, shortCode string) (*entities.ShortUrl, error) {
	ret := _m.Called(ctx, shortCode)

	if len(ret) == 0 {
		panic("no return value specified for FindByShortCode")
	}

	var r0 *entities.ShortUrl
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entities.ShortUrl, error)); ok {
		return rf(ctx, shortCode)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entities.ShortUrl); ok {
		r0 = rf(ctx, shortCode)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.ShortUrl)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, shortCode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockShortUrlQueryRepositoryInterface_FindByShortCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByShortCode'
type MockShortUrlQueryRepositoryInterface_FindByShortCode_Call struct {
	*mock.Call
}

// FindByShortCode is a helper method to define mock.On call
//   - ctx context.Context
//   - shortCode string
func (_e *MockShortUrlQueryRepositoryInterface_Expecter) FindByShortCode(ctx interface{}, shortCode interface{}) *MockShortUrlQueryRepositoryInterface_FindByShortCode_Call {
	return &MockShortUrlQueryRepositoryInterface_FindByShortCode_Call{Call: _e.mock.On("FindByShortCode", ctx, shortCode)}
}

func (_c *MockShortUrlQueryRepositoryInterface_FindByShortCode_Call) Run(run func(ctx context.Context, shortCode string)) *MockShortUrlQueryRepositoryInterface_FindByShortCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockShortUrlQueryRepositoryInterface_FindByShortCode_Call) Return(_a0 *entities.ShortUrl, _a1 error) *MockShortUrlQueryRepositoryInterface_FindByShortCode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockShortUrlQueryRepositoryInterface_FindByShortCode_Call) RunAndReturn(run func(context.Context, string) (*entities.ShortUrl, error)) *MockShortUrlQueryRepositoryInterface_FindByShortCode_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockShortUrlQueryRepositoryInterface creates a new instance of MockShortUrlQueryRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockShortUrlQueryRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockShortUrlQueryRepositoryInterface {
	mock := &MockShortUrlQueryRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"
	dto "short-url/domains/dto"

	entities "short-url/domains/entities"

	mock "github.com/stretchr/testify/mock"
)

// MockShortUrlServiceInterface is an autogenerated mock type for the ShortUrlServiceInterface type
type MockShortUrlServiceInterface struct {
	mock.Mock
}

type MockShortUrlServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockShortUrlServiceInterface) EXPECT() *MockShortUrlServiceInterface_Expecter {
	return &MockShortUrlServiceInterface_Expecter{mock: &_m.Mock}
}

// CreateShortUrl provides a mock function with given fields: ctx, longUrl, userID
func (_m *MockShortUrlServiceInterface) CreateShortUrl(ctx context.Context, longUrl string, userID uint) (*entities.ShortUrl, error) {
	ret := _m.Called(ctx, longUrl, userID)

	if len(ret) == 0 {
		panic("no return value specified for CreateShortUrl")
	}

	var r0 *entities.ShortUrl
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, uint) (*entities.ShortUrl, error)); ok {
		return rf(ctx, longUrl, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, uint) *entities.ShortUrl); ok {
		r0 = rf(ctx, longUrl, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.ShortUrl)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, uint) error); ok {
		r1 = rf(ctx, longUrl, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockShortUrlServiceInterface_CreateShortUrl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateShortUrl'
type MockShortUrlServiceInterface_CreateShortUrl_Call struct {
	*mock.Call
}

// CreateShortUrl is a helper method to define mock.On call
//   - ctx context.Context
//   - longUrl string
//   - userID uint
func (_e *MockShortUrlServiceInterface_Expecter) CreateShortUrl(ctx interface{}, longUrl interface{}, userID interface{}) *MockShortUrlServiceInterface_CreateShortUrl_Call {
	return &MockShortUrlServiceInterface_CreateShortUrl_Call{Call: _e.mock.On("CreateShortUrl", ctx, longUrl, userID)}
}

func (_c *MockShortUrlServiceInterface_CreateShortUrl_Call) Run(run func(ctx context.Context, longUrl string, userID uint)) *MockShortUrlServiceInterface_CreateShortUrl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(uint))
	})
	return _c
}

func (_c *MockShortUrlServiceInterface_CreateShortUrl_Call) Return(_a0 *entities.ShortUrl, _a1 error) *MockShortUrlServiceInterface_CreateShortUrl_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockShortUrlServiceInterface_CreateShortUrl_Call) RunAndReturn(run func(context.Context, string, uint) (*entities.ShortUrl, error)) *MockShortUrlServiceInterface_CreateShortUrl_Call {
	_c.Call.Return(run)
	return _c
}

// GetByFilter provides a mock function with given fields: ctx, filter, pagination
func (_m *MockShortUrlServiceInterface) GetByFilter(ctx context.Context, filter dto.ShortUrlQueryFilter, pagination dto.Pagination) ([]entities.ShortUrl, *dto.PaginationResponse, error) {
	ret := _m.Called(ctx, filter, pagination)

	if len(ret) == 0 {
		panic("no return value specified for GetByFilter")
	}

	var r0 []entities.ShortUrl
	var r1 *dto.PaginationResponse
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.ShortUrlQueryFilter, dto.Pagination) ([]entities.ShortUrl, *dto.PaginationResponse, error)); ok {
		return rf(ctx, filter, pagination)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.ShortUrlQueryFilter, dto.Pagination) []entities.ShortUrl); ok {
		r0 = rf(ctx, filter, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.ShortUrl)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.ShortUrlQueryFilter, dto.Pagination) *dto.PaginationResponse); ok {
		r1 = rf(ctx, filter, pagination)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*dto.PaginationResponse)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, dto.ShortUrlQueryFilter, dto.Pagination) error); ok {
		r2 = rf(ctx, filter, pagination)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockShortUrlServiceInterface_GetByFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByFilter'
type MockShortUrlServiceInterface_GetByFilter_Call struct {
	*mock.Call
}

// GetByFilter is a helper method to define mock.On call
//   - ctx context.Context
//   - filter dto.ShortUrlQueryFilter
//   - pagination dto.Pagination
func (_e *MockShortUrlServiceInterface_Expecter) GetByFilter(ctx interface{}, filter interface{}, pagination interface{}) *MockShortUrlServiceInterface_GetByFilter_Call {
	return &MockShortUrlServiceInterface_GetByFilter_Call{Call: _e.mock.On("GetByFilter", ctx, filter, pagination)}
}

func (_c *MockShortUrlServiceInterface_GetByFilter_Call) Run(run func(ctx context.Context, filter dto.ShortUrlQueryFilter, pagination dto.Pagination)) *MockShortUrlServiceInterface_GetByFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dto.ShortUrlQueryFilter), args[2].(dto.Pagination))
	})
	return _c
}

func (_c *MockShortUrlServiceInterface_GetByFilter_Call) Return(_a0 []entities.ShortUrl, _a1 *dto.PaginationResponse, _a2 error) *MockShortUrlServiceInterface_GetByFilter_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockShortUrlServiceInterface_GetByFilter_Call) RunAndReturn(run func(context.Context, dto.ShortUrlQueryFilter, dto.Pagination) ([]entities.ShortUrl, *dto.PaginationResponse, error)) *MockShortUrlServiceInterface_GetByFilter_Call {
	_c.Call.Return(run)
	return _c
}

// GetByShortCode provides a mock function with given fields: ctx, shortCode
func (_m *MockShortUrlServiceInterface) GetByShortCode(ctx context.Context, shortCode string) (*entities.ShortUrl, error) {
	ret := _m.Called(ctx, shortCode)

	if len(ret) == 0 {
		panic("no return value specified for GetByShortCode")
	}

	var r0 *entities.ShortUrl
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entities.ShortUrl, error)); ok {
		return rf(ctx, shortCode)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entities.ShortUrl); ok {
		r0 = rf(ctx, shortCode)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.ShortUrl)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, shortCode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockShortUrlServiceInterface_GetByShortCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByShortCode'
type MockShortUrlServiceInterface_GetByShortCode_Call struct {
	*mock.Call
}

// GetByShortCode is a helper method to define mock.On call
//   - ctx context.Context
//   - shortCode string
func (_e *MockShortUrlServiceInterface_Expecter) GetByShortCode(ctx interface{}, shortCode interface{}) *MockShortUrlServiceInterface_GetByShortCode_Call {
	return &MockShortUrlServiceInterface_GetByShortCode_Call{Call: _e.mock.On("GetByShortCode", ctx, shortCode)}
}

func (_c *MockShortUrlServiceInterface_GetByShortCode_Call) Run(run func(ctx context.Context, shortCode string)) *MockShortUrlServiceInterface_GetByShortCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockShortUrlServiceInterface_GetByShortCode_Call) Return(_a0 *entities.ShortUrl, _a1 error) *MockShortUrlServiceInterface_GetByShortCode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockShortUrlServiceInterface_GetByShortCode_Call) RunAndReturn(run func(context.Context, string) (*entities.ShortUrl, error)) *MockShortUrlServiceInterface_GetByShortCode_Call {
	_c.Call.Return(run)
	return _c
}

// IncrementClickCount provides a mock function with given fields: ctx, shortCode
func (_m *MockShortUrlServiceInterface) IncrementClickCount(ctx context.Context, shortCode string) error {
	ret := _m.Called(ctx, shortCode)

	if len(ret) == 0 {
		panic("no return value specified for IncrementClickCount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, shortCode)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockShortUrlServiceInterface_IncrementClickCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncrementClickCount'
type MockShortUrlServiceInterface_IncrementClickCount_Call struct {
	*mock.Call
}

// IncrementClickCount is a helper method to define mock.On call
//   - ctx context.Context
//   - shortCode string
func (_e *MockShortUrlServiceInterface_Expecter) IncrementClickCount(ctx interface{}, shortCode interface{}) *MockShortUrlServiceInterface_IncrementClickCount_Call {
	return &MockShortUrlServiceInterface_IncrementClickCount_Call{Call: _e.mock.On("IncrementClickCount", ctx, shortCode)}
}

func (_c *MockShortUrlServiceInterface_IncrementClickCount_Call) Run(run func(ctx context.Context, shortCode string)) *MockShortUrlServiceInterface_IncrementClickCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockShortUrlServiceInterface_IncrementClickCount_Call) Return(_a0 error) *MockShortUrlServiceInterface_IncrementClickCount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockShortUrlServiceInterface_IncrementClickCount_Call) RunAndReturn(run func(context.Context, string) error) *MockShortUrlServiceInterface_IncrementClickCount_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockShortUrlServiceInterface creates a new instance of MockShortUrlServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockShortUrlServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockShortUrlServiceInterface {
	mock := &MockShortUrlServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

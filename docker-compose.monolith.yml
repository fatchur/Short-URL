version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: short-url-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: short_url
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: short-url-redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  migrate:
    image: golang:1.23-alpine
    container_name: short-url-migrate
    working_dir: /app
    volumes:
      - .:/app
    network_mode: host
    command: sh -c "cd cmd && go run . -d migrate"
    depends_on:
      postgres:
        condition: service_healthy
    restart: "no"

  seed:
    image: golang:1.23-alpine
    container_name: short-url-seed
    working_dir: /app
    volumes:
      - .:/app
    network_mode: host
    command: sh -c "cd cmd && go run . -d seed"
    depends_on:
      migrate:
        condition: service_completed_successfully
    restart: "no"

  monolith:
    image: short-url-monolith
    container_name: short-url-monolith
    # For Linux: use network_mode: host for better performance
    # network_mode: host
    # For macOS/Windows: use port mapping (host networking doesn't work with Docker Desktop)
    ports:
      - "8080:8080"
    environment:
      # For Docker networks: use service names as hostnames
      - DB_HOST=postgres
      - REDIS_HOST=redis
      # For host networking: use localhost
      # - DB_HOST=localhost  
      # - REDIS_HOST=localhost
    depends_on:
      seed:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
    restart: unless-stopped

volumes:
  postgres_data: